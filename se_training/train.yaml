# #################################
# Basic training parameters for enhancement.
#
# Authors:
#  * Szu-Wei Fu 2020
#  * Chien-Feng Liao 2020
#  * Peter Plantinga 2020, 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 5153
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# decide whether use gpu or cpu to train the model
run_opts:
    device: cuda:0

# the location to save results, model states and trianing logs
output_folder: !ref D:\ASRProj\se_training\results\<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# the absolute Path where data metadata files are stored
data_path:
    train: D:\LibriMix\data\Libri1Mix\wav8k\min\metadata\mixture_libri2mix_train-100_mix_single.csv
    dev: D:\LibriMix\data\Libri1Mix\wav8k\min\metadata\mixture_libri2mix_dev_mix_single.csv
    test: D:\LibriMix\data\Libri1Mix\wav8k\min\metadata\mixture_libri2mix_test_mix_single.csv

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# FFT parameters
sample_rate: 8000
win_length: 32
hop_length: 16
n_fft: 512
window_fn: !name:torch.hamming_window

# Training Parameters
number_of_epochs: 100

batch_size: 128
learning_rate: 0.0001
dataloader_options:
    batch_size: !ref <batch_size>

# The mask operates on log-spectral features, computed using these
# STFT parameters, as well as computing magnitude and log1p.
compute_STFT: !new:speechbrain.processing.features.STFT
    sample_rate: !ref <sample_rate>
    win_length: !ref <win_length>
    hop_length: !ref <hop_length>
    n_fft: !ref <n_fft>
    window_fn: !ref <window_fn>
compute_ISTFT: !new:speechbrain.processing.features.ISTFT
    sample_rate: !ref <sample_rate>
    win_length: !ref <win_length>
    hop_length: !ref <hop_length>
    window_fn: !ref <window_fn>

# Resynthesize combines noisy phase with enhanced magnitudes.
resynth: !name:speechbrain.processing.signal_processing.resynthesize
    stft: !ref <compute_STFT>
    istft: !ref <compute_ISTFT>

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.
model: !new:custom_model.CustomModel
    input_size: !ref <n_fft> // 2 + 1
    layers: 2

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    model: !ref <model>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
    lr: !ref <learning_rate>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        counter: !ref <epoch_counter>
